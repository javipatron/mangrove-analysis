---
title: "Silvestrum Assignment"
author: "Javier Patrón"
date: "`r Sys.Date()`"
output:
  pdf_document:
    latex_engine: xelatex
    toc: true
    number_sections: true
    fig_caption: true
    keep_tex: true
    highlight: tango
---

## Introduccion

This assignment aims to estimate the required number of plots per project based on tree carbon variance by analyzing the data from two sites (A and B). The analysis involved data cleaning, processing, creation of a correlation matrix, and power calculations to deepen the understanding of the correlation between variables. The statistical analysis was performed using the R programming language in R Studio. Tables and graphs were created to visualize the findings and draw conclusions about the sampled trees and plots. The A/R methodological Tool was used to measure and compare the number of plots required per plantation year. Please note that the preliminary results presented in this report require further review and fine-tuning for real samples in the field.

#### Steps:

1.  Load the necessary libraries
2.  Read the CSV files
3.  Clean and change column types as needed
4.  Filter, join and create a data frame with all samples from Site A and Site B, ensuring that only 154m2 sample plots are included (Table #1)
5.  Create a correlation matrix to understand the variables affecting Total Tree Carbon (Mg/ha)
6.  Run a power calculation to determine the number of trees needed per plot
    a.  Create a table (#2) with all the necessary stats information grouped by plot
    b.  Create a graph (#1) to show the effect of tree count on the standard deviation of carbon per plot
    c.  Create a for loop that runs a power calculation per plot and shows the estimated number of trees required to maintain a 90% power. This information is displayed in Table #3
    d.  Create a graph (#2) that shows the effect of tree size variation (SD tree Diameter) on the recommended decrease of total number of trees to be measured per plot
    e.  Create a graph (#3) that shows how the mean of tree size (crown_diameter_cm) affects the standard deviation of carbon (Mg/ha) per plot
    f.  Draw conclusions regarding the sampled trees
7.  Analyze and calculate the total number of plots per plantation year (project)
    a.  Create a table that contains all the information for the analysis
    b.  Create a for loop that runs a power calculation per plantation year and shows the estimated number of plots required to maintain a 90% power. This information is displayed in Table #4
    c.  Create a table (#4) grouping per plantation year
    d.  Create a for loop that runs the A/R Methodological Tool
    e.  Merge all results in a table (#5)
    f.  Create a graph (#4) that shows the calculated number of plots per method and per project
    g.  Draw conclusions around the calculations required for estimating biomass stocks and the number of plots required using different methods
8.  An extra linear regression (OLS) analysis

**Notes:**

1\) To increase the amount of data available for the analysis I merge the data from both sites, I have made the assumption of combining the crown size diameter data from Site B (*Crown Dia (cm)* ) with the CD Chatting in cm from site A (*CD Chatting (m) )*. I assume this is right.

2\) The PDF report only shows some of the code and steps to perform the analysis. The full details of the analysis, including the code and steps, can be found in the original script file (.Rmd)."

![](tree_diagram.jpg){width="50%", fig.align = "center}

```{r, include = FALSE}
#1. Load the libraries
library(tidyverse)
library(here)
library(janitor)
library(knitr)
library(pwr)
library(skimr)
library(tidymodels)
library(kableExtra)
library(corrplot)
library(stringr)
library(plotly)
library(stargazer)
library(car)
library(estimatr)


```

```{r, include = FALSE}

#2. Read the .cv files 
#Load the shared Mangrove Data from Silvestrum
mangrove_df_a <- read_csv("/Users/javipatron/Documents/MEDS/Personal/projects/mangrove-analysis/data/clean_monitoring_data_javier.csv") |> clean_names() #Clean names will make the column names as lower case

mangrove_df_b <- read_csv("/Users/javipatron/Documents/MEDS/Personal/projects/mangrove-analysis/data/siteb.csv") |> clean_names() |> na.omit()#homogenizing the column names and adding NA to values

```

```{r, echo = F}
#3. Cleaning and changing the type of class of some columns

#Changing some data
mangrove_df_a$plantation_year <- as.character(mangrove_df_a$plantation_year) # Making the years as character instead of numbers
mangrove_df_a$plot <- as.character(mangrove_df_a$plot) # Making the plot names as character
mangrove_df_a$plot_size_m2 <- as.factor(mangrove_df_a$plot_size_m2) # Making the plot sizes as factor instead of numeric

```

```{r, echo = F}
# 4. Joining both data frames with plot sizes of 154m2 - ONLY
#Cleaning and getting the site A ready for the stacking

tidy_a <- mangrove_df_a |> 
  filter(plot_size_m2 == 153.938) |> 
  select(plantation_year, plot, height_cm, cd_chatting_m, total_tree_kg_c, total_tree_mg_c_ha) |> 
  mutate(site = "A",
         cd_chatting_m = cd_chatting_m * 100)|> 
  relocate(site, .before = plantation_year) |> 
  rename(year = plantation_year,
         plot_name = plot,
         crown_diameter_cm = cd_chatting_m,
         total_tree_c_kg = total_tree_kg_c,
         "total_tree_c_Mg_ha" = total_tree_mg_c_ha) |>
  mutate(plot_name = as.numeric(plot_name)) |> 
  mutate(new_plot_name = ifelse(plot_name < 10, sprintf("0%d", plot_name), as.character(plot_name))) |> 
  relocate(new_plot_name, .after = plot_name)

```

```{r, echo = F}
# Cleaning and getting the site B for the stacking with site B
tidy_b <- mangrove_df_b |> 
  select(year, plot, height_cm, crown_dia_m, total_c_kg, total_c_t_ha) |> 
  mutate(site = "B",
         crown_dia_m = crown_dia_m *100) |> 
  rename(plot_name = plot,
         total_tree_c_kg = total_c_kg,
         "total_tree_c_Mg_ha" = total_c_t_ha,
         crown_diameter_cm = crown_dia_m ) |> 
    relocate(site, .before = year)

```

```{r, echo = F}
tidy_b <- tidy_b %>% 
  mutate(new_plot_name = str_extract(plot_name, "(?<=Sample Plot #\\s)\\d+")) |> 
  relocate(new_plot_name, .after = plot_name)
```

```{r, echo = F}

# 4. Creating a row binding to have the same columns but all the information
full_df <- rbind(tidy_a, tidy_b) |> 
    mutate(plot_name = paste0("site", site, "_", year, "_plot_", new_plot_name)) |> 
  rename(full_plot_name = plot_name) |> 
  mutate(new_plot_name = paste0("Sample_Plot#", new_plot_name)) |> 
  rename(plot_name = new_plot_name) |> 
  relocate(full_plot_name, .before = height_cm)

```

```{r, echo = F}

write_csv(full_df, here::here("full_df.csv"))

```

```{r, echo=F}

mangrove_recipe <- full_df |> 
  select(-c(full_plot_name)) |> 
  recipe(total_tree_c_Mg_ha ~ .) |> 
  step_integer(site, year, plot_name, zero_based = TRUE) |> 
  prep() |> 
  bake(new_data = NULL)

```

#### Step 1, 2, 3

These steps were completed within the environment of the R Markdown.

#### Step 4

Here is an overview of the complete data frame comprising information from both sites is provided below. Please note that the Table below is showing only the first 10 records.

```{r, echo=F}

full_df %>%
  head(10) %>%
  kable(format = "html", booktabs = TRUE, align = "c", caption = "Table 1. All sample trees (Site A+B)") %>%
  kable_styling(full_width = FALSE)

# Print the dimensions of the data frame
print(paste("The dimensions of this complete data frame are", dim(full_df)[1], "rows and", dim(full_df)[2], "columns."))

```

#### Step 5

Create a correlation Matrix to see the importance of the variables.

```{r}

# Obtain correlation matrix
tree_matrix <- cor(mangrove_recipe)

# Make a correlation plot between the variables
corrplot(tree_matrix, 
         method = "shade", 
         shade.col = NA, 
         tl.col = "black", 
         tl.srt = 45, 
         addCoef.col = "black", 
         cl.pos = "n", 
         order = "original")

```

As we can see in the matrix above the height of the tree is relevant `height_cm` with 0.46 of correlation but the `crown/diameter` column is even **greater with 0.86** (Strong positive correlation).

The strength of the correlation coefficient (0.86) suggests that this relationship is fairly robust, with a high degree of association between the two variables. In other words, as the crown size of the tree increases, there is a tendency for the total tree calculated carbon to also increase. However, that correlation **does not necessarily imply causation.** Other factors, such as environmental conditions, soil quality, or other factors, may also play a role in determining both crown size and carbon content in mangrove trees.

#### Step 6

Run a power calculation to determine the number of trees needed per plot:

```{r, include = FALSE}
#6 Creating a summary table for amount of tree´s per plot
full_plots <- full_df |> 
  group_by(site, year, plot_name) |> 
  summarise(tree_count = n(),
            density = tree_count/154,
            mean_height_cm = mean(height_cm),
            sd_height = sd(height_cm),
            mean_diameter_cm = mean(crown_diameter_cm),
            sd_diameter = sd(crown_diameter_cm),
            mean_biomass = mean(total_tree_c_kg),
            sd_biomass = sd(total_tree_c_kg),
            mean_carbon_Mg_ha = mean(total_tree_c_Mg_ha),
            sd_carbon_Mg_ha = sd(total_tree_c_Mg_ha),
            std_error = sd_carbon_Mg_ha/sqrt(tree_count)) |> 
  relocate(plot_name, .after = year)
```

```{r, echo = F}

write_csv(full_plots, here::here("full_plots.csv"))

```

#### Step 6 (a)

Create a Table #2 with all the necessary stats information grouped by plot

```{r, echo = F}

full_plots %>%
  head(10) |> 
  kable(booktabs = TRUE, 
        align = "c", 
        caption = "Table 2. General info of every plot") %>%
  kable_styling(full_width = FALSE)

# Print the dimensions of the data frame
print(paste("The dimensions of this sample plot data frame are", dim(full_plots)[1], "rows and", dim(full_plots)[2], "columns."))

```

#### Step 6 (b)

Generate a graph (Graph #1) that visually represents the relationship between the number of trees counted per plot and the resulting standard deviation of carbon per plot.

```{r, echo = FALSE}

ggplot(full_plots, aes(x = tree_count, y = sd_carbon_Mg_ha)) +
  geom_jitter(aes(color = site)) +
  labs(title = "Carbon Divergence in relation to Tree samples",
       subtitle = "Graph #1",
       x = "Number of trees per plot",
       y = "Std. Dev of carbon per plot")

```

The graph (#1) illustrates that as the number of sampled trees increases, the divergence of the carbon calculations (SD) decreases significantly. However, it is important to **find and establish a threshold for the optimal number of trees required to achieve an accurate estimate.**

#### Step 6 (c)

Creating a new vector for the Power Calculation of number of trees

```{r}
new_vector <- c()
for(i in 1:nrow(full_plots)) { 
  sd = full_plots$sd_carbon_Mg_ha[[i]]
  mean = full_plots$mean_carbon_Mg_ha[[i]]
  d1 = as.numeric(sqrt(sd^2/2))
  effect_size = mean / d1
  power_test <- pwr.t.test(d = round(effect_size,2), 
                           power = 0.90, 
                           sig.level = 0.05,
                           type="two.sample",
                           alternative="two.sided")
  new <- round(power_test$n,1)            
  new_vector <- c(new_vector, new)
}

```

```{r, echo = F}
# Adding the vector to the data frame
full_plots <- cbind(full_plots, data.frame(power = new_vector)) |> 
  relocate(power, .after = tree_count)

```

```{r, echo = F}
# Creating a new column and relocating others
full_plots <- full_plots |> 
  mutate(difference = ((tree_count - power)/ tree_count) *100) |> 
  relocate(difference, .after = power) |> 
  mutate(difference = round(difference,1))

```

```{r, echo = F}
full_plots %>%
  head(10) |> 
  kable(align = "c",
        caption = "Table 3. Estimated number of trees per plot") |> 
  kable_styling(full_width = FALSE) |> 
  column_spec(5, background = "yellow") |> 
  column_spec(6, background = "lightgreen")
  
# Print the dimensions of the data frame
print(paste("The dimensions of this sample plot data frame are", dim(full_plots)[1], "rows and", dim(full_plots)[2], "columns."))
```

As presented in the table above, the number of trees achieving a power level of 0.90 is indicated by the yellow highlighting, whereas the percentage reduction of samples being measured is indicated by the green highlighting.

#### Step 6 (d)

Create a graph (#2)

```{r, include = FALSE}

ggplot(full_plots, aes(x = sd_diameter, y = difference, color = site)) +
  geom_point() +
  labs(title = "Effect of tree size (Diameter) on sample tree reduction",
       subtitle = "Graph #2",
       x = "Std Dev of Diameter (cm)",
       y = "Optimization (%)") +
  ylim(-700, 300) +
  scale_y_continuous(breaks = seq(-700, 300, by = 100))

```

Graph #2 presents a relationship between variance in tree sizes and the difference between the estimated total trees by the power calculation and the actual number of samples. It suggests that plots with higher variance may require more tree samples, while **those with lower variation may require fewer samples.**

#### Step 6 (e)

Produce Graph #3 illustrating the relationship between the average size of trees (measured by crown diameter in centimeters) and the standard deviation of carbon (in Mg/ha) per plot.

```{r, echo = F}

ggplot(full_plots, aes(x = mean_diameter_cm, y = sd_carbon_Mg_ha, color = site )) +
  geom_point() +
  labs(title = "Effect of tree diameter on Carbon variation (Mg/ha)",
       subtitle = "Graph #3",
      x = "Mean of Tree Diameter (cm)",
      y = "Std. Dev of Carbon per tree (Mg/ha)")

```

Graph #3 displays the impact of the mean tree size (crown diameter in centimeters), on the standard deviation of carbon (Mg/ha) per plot. The graph **demonstrates a noticeable rise in the variability of carbon calculations as the size of trees increases.**

#### Step 6 (f)

##### Conclusions for calculating the amount of trees

1.  The power calculation in Table #3 suggests that a significant reduction in the number of trees measured is possible while still maintaining a 90% power level. However, plots with high variance may require additional sampling to maintain the same level of power.

2.  Graph #1 demonstrates that there is an inverse relationship between the number of trees measured per plot and the Std. Deviation of the calculated Carbon (Mg/ha) per plot. This suggests that **increasing the number of trees sampled can lead to more precise carbon measurements**. However, there is a **trade-off between accuracy and efficiency, as increasing the number of trees sampled can also increase project costs**. Therefore, we proceeded with the power calculation method to determine the optimal number of trees to be sampled.

3.  Graph #2 suggests that most plots can significantly reduce the number of sampled trees, except for outliers (`2019 Sample Plot# 01`, `2018 Sample Plot# 02`, and `2015 Sample Plot# 06)`, which exhibit unusual data and behavior and may require additional sampling to ensure accurate carbon measurement.

4.  Graph #3 reveals a significant relationship between canopy diameter and the SD of Carbon calculated. The analysis indicates that larger trees tend to contribute to greater disturbance and variation in the overall carbon calculations, suggesting that careful consideration of sample selection is necessary to minimize variability in carbon measurements.

#### Step 7 (a)

Analyze and calculate the total number of plots per plantation year (project):

```{r, echo = F}
# Creating a summary table for number of plots
summary_full_df <- full_df |> 
  group_by(site, year) |> 
  summarise(plot_count = length(unique(plot_name)),
            tree_count = n(),
            density = (tree_count/plot_count),
            mean_height_cm = mean(height_cm),
            sd_height_cm = sd(height_cm),
            mean_diameter_cm = mean(crown_diameter_cm),
            sd_diameter_cm = sd(crown_diameter_cm),
            mean_biomass = mean(total_tree_c_kg),
            sd_biomass = sd(total_tree_c_kg),
            mean_tot_carbon_Mg_ha = mean(total_tree_c_Mg_ha),
            sd_tot_carbon_Mg_ha = sd(total_tree_c_Mg_ha),
            std_error = sd_tot_carbon_Mg_ha/sqrt(plot_count))
```

#### Step 7 (b)

Creating a new vector for the Power Calculation with the carbon biomass data (`Total Tree Carbon (Kg)`)

```{r}
new_vector2 <- c()

for(i in 1:nrow(summary_full_df)) { 
  sd = summary_full_df$sd_biomass[[i]]
  mean = summary_full_df$mean_biomass[[i]]
  d1 = as.numeric(sqrt(sd^2/2))
  effect_size = mean / d1
  power_test <- pwr.t.test(d = effect_size, 
                           power = 0.90, 
                           sig.level = 0.05,
                           type="two.sample",
                           alternative="two.sided")
  new <- round(power_test$n,1)            
  new_vector2 <- c(new_vector2, new)}

```

```{r, echo = F}
# Adding the vector to the data frame
summary_full_df <- cbind(summary_full_df, data.frame(power = new_vector2))
summary_full_df <- summary_full_df |> 
  relocate(power, .after = plot_count)

```

#### Step 7 (c)

Create a table (#4) grouping per plantation year

```{r, echo=F}
summary_full_df %>%
  head(10) |> 
  kable(align = "c",
        caption = "Table 4. Estimated number of sample plots per project") |> 
   kable_styling(full_width = FALSE) |> 
  column_spec(3, background = "lightpink") |> 
  column_spec(4, background = "lightblue")

# Print the dimensions of the data frame
cat("The dimensions of this data frame which contains the info per each project are", dim(summary_full_df)[1], "rows and", dim(summary_full_df)[2], "columns.")

```

Table #4 displays the actual number of plots per project highlighted in pink as well as the estimated number of sample plots calculated using the power calculation method in blue.

```{r, include= F}
# Power Calculation Testing
# sd = summary_full_df[[10,7]]
# mean = summary_full_df[[10,6]]
# d1 = as.numeric(sqrt(sd^2/2))
# effect_size = mean / d1
# power_test <- pwr.t.test(d = effect_size, 
#                          power = 0.90, 
#                          sig.level = 0.05,
#                          type="two.sample",
#                          alternative="two.sided")
# 
# print(power_test)
# 
# round(power_test$n,1)
# ceiling(power_test$n)             

```

#### Step 7 (d)

Create a for loop that runs the A/R Methodological Tool.

$$n =\frac{N \text{ }* \text{ }tvalue^2 \text{ }* \text{ }(\epsilon\ w * s)^2)}{N \text{ }*\text{ } E^2 + \text{ }tvalue^2 \text{ }* \text{ }\epsilon\ w * s^2}$$

*n* = Number of sample plots required for estimation of biomass stocks within the project boundary; dimensionless.

*N* = Total number of possible sample plots within the project boundary space or the population; dimensionless. (`plot_count`)

*t-value* = Two-sided Student´s t-value, at infinite degrees of freedom, for the required confidence level; dimensionless. (`Table-\> 90% = 1.645`)

*w* = Relative weight of the area of stratum i (i.e. the area of the stratum i divided by the project). (`154/ plot_count * 154`)

*s =* Estimated standard deviation of biomass stock in stratum (`SD Carbon Biomass`)

*E* = Acceptable margin of error (i.e. one-half the confidence interval) in estimation of biomass stock within the project boundary. (`t-test of sd_biomass --> conf. intervals --> (upper - lower)/2`)

```{r}
# create a logical condition that is TRUE for rows where the year is 2010
# use the condition inside the square brackets to subset the data frame and select the "density" column

tvalue = 1.645
conf_interval <- t.test(summary_full_df$sd_biomass, conf.level = 0.95)
lower <- conf_interval$conf.int[1]
upper <- conf_interval$conf.int[2]
E <- (upper - lower) / 2

ar_tool <- c()

for (i in seq(1,10)){
  year_condition <- summary_full_df$year[i]
  w <- 154/(summary_full_df$plot_count[i]*154)
  s <- full_plots$sd_biomass[which(full_plots$year == year_condition)]
  N <- summary_full_df$plot_count[i]
  n <- round((N * tvalue^2 * sum(w * s)^2) / (N * E^2 + (tvalue^2 * sum(w * s^2))),1)
  ar_tool <- c(ar_tool, n)
}

summary_full_df$ar_tool <- ar_tool

```

```{r, echo = F}
#Adding the new vector to the data frame
summary_full_df <- summary_full_df |> 
  relocate(ar_tool, .after = power)

```

#### Step 7 (e)

Merge all results in a table (#5)

```{r, echo = F}
#Creating a kable table to show the first lines of summary_full_df

summary_full_df %>%
  head(10) %>%
  kbl(booktabs = TRUE, align = "c", caption = "Table 5. Number of sample plots by defined by each method") %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(3, background = "lightblue") %>%
  column_spec(4, background = "lightgreen") %>%
  column_spec(5, background = "pink")

# Print the dimensions of the data frame
cat("The dimensions of this data frame which contains the info per each project are", dim(summary_full_df)[1], "rows and", dim(summary_full_df)[2], "columns.")

```

#### Step 7 (f)

Create a graph (#4) that shows the calculated number of plots per method and per project

```{r, echo = F}
# Creating a graph to see the three methods result in one graph
graph4 <- summary_full_df |> 
  mutate(year = paste(year, "site:", site)) |> 
  ggplot(aes(x = year)) +
  geom_point(aes(y = power, color = "power")) +
  geom_point(aes(y = plot_count, color = "real")) +
  geom_point(aes(y = ar_tool, color = "A/R Tool")) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.8)) +
  labs(title = "Estimated number of plots per project",
       subtitle = "Graph #4",
       x = "Plantation Year",
       y = "Number of Plots",
       color = "Method")

graph4

```

#### Step 7 (f)

##### Conclusions for the calculations of amount of plots:

1.  The graph #4 illustrates the distribution of plantation years and the number of plots utilizing each method. The "real" figures represent the initial data, the "power" numbers are based on the power calculation demonstrated in the aforementioned code, and the "A/R Tool" employs the formula generated by the for loop.

2.  In table #5 you can see a complex interaction between the various calculations and methods. There is a substantial fluctuation in the total number of plots, contingent on the method used. Although certain plantation years demonstrate comparable results across all three methods (e.g., "2016 on Site B"), other years exhibit substantial deviations, such as (e.g., "2020 on Site A"). It is essential to verify these results.

3.  Notably, Graph #4 reveals an intriguing pattern between the read number of plots and A/R Tool-predicted number of plots. I would like to take further examination with your input.

4.  With regard to the PDF of A/R Methodological Tool. The point 13 suggest that a second iteration is necessary if the iteration count is below 30. Which i would also like to take further examination with your help and interpretation.

#### Step 8

An extra Analysis on logistic regression (OLS)

```{r}

plot_log1 <- ggplot(full_df, aes(x= crown_diameter_cm, y = total_tree_c_kg, color = site )) +
  geom_point(alpha = 0.5) +
  labs(title = "Carbon vs Crown Diameter in Trees",
       subtitle = "Logistic Relationship",
       x = "Crown Diameter (cm)",
       y = "Total Carbon per tree (kg)")

plot_log2 <- ggplot(full_df, aes(x= crown_diameter_cm, y = total_tree_c_Mg_ha, color = site )) +
  geom_point(alpha = 0.5) +
  labs(title = "Carbon per Hectare vs Crown Diameter in Trees",
       subtitle = "Logistic Relationship (Area",
       x = "Crown Diameter (cm)",
       y = "Total Carbon per tree (Mg / ha)")


plot_log1
plot_log2


```

Analysis with log

```{r}
#Take the log of the columns to make it a linear regression
full_df_log <- full_df |> 
  mutate(total_tree_c_kg = log10(total_tree_c_kg),
    total_tree_c_Mg_ha = log10(total_tree_c_Mg_ha),
         crown_diameter_cm = log10(crown_diameter_cm))

```

```{r}

plot_linear <- full_df_log |> 
  ggplot(aes(x=crown_diameter_cm, y = total_tree_c_kg)) +
  geom_point(alpha = 0.8, color = "darkolivegreen") +
  labs(title = "Log Tree Carbon (kg) vs Crown Diameter (cm)",
       x = "Crown Diameter (cm)",
       y = "Total Carbon per tree (kg)") 

plot_linear

```

Using `lm()` to estimate $\hat\beta_0$, and $\hat\beta_1$ using this sample of data.

```{r}
# Return a vector of the same length as full_df_log, indicating which elements are finite or infinite.
lm_log_kg <- full_df_log[is.finite(full_df_log$total_tree_c_kg), ]

# Create a OLS (Ordinary Least Squares)
ols_model <- lm(total_tree_c_kg ~ crown_diameter_cm,  data=lm_log_kg) |>
  summary()

# Run the lm_robust to have the coeficients
ols_model2 <- lm_robust(formula = total_tree_c_kg ~ crown_diameter_cm, data = lm_log_kg)

#Run the starprep & stargazer for a nice lookup of the numbers
ols_std_erros <- starprep(ols_model2, #The starprep will help us with the Heteroskedastic Errors
         stat = c("std.error"),
         se_type = "HC1",
         alpha = 0.05)

ols_model

```

##### Interpretation:

For $\hat\beta_1$: For **every one unit increase in crown diameter** (in cm), the estimated total carbon in the tree **increases by 2.162 kg on average**, holding all other variables constant.

For the standard error as this calculations are made from formulas in excel the p-values are very small, indicating that the estimates are statistically significant and unlikely to be due to chance.

The model was fit with 12080 degrees of freedom (DF), indicating that there were likely many observations in the data set.
